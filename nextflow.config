/*
 * ======================================================
 *  eukaryotic-genome-assembly default configuration file
 * ======================================================
 */

final ERROR_CODES = [12,143,137,104,134,139]

summary {
  name = 'eukaryotic-genome-assembly'
  author = 'Thilo Schulze'
  website = 'https://github.com/ThiloSchulze/eukaryotic-genome-assembly'
  description = 'A pipeline for eukaryotic genome assembly'
  mainScript = 'main.nf'
  nextflowVersion = '!>=20.04.1'
  version = '1.1'
}

params {
  // Mandatory option
  reads = null

  // Miscellaneous
  help = false
  version = false

  // Input/output options
  single_end = false
  output = "assembly_out"

  // Resource allocation
  max_retries = 2
  max_cpus = 16
  // Memory allocation guide:
  //   B = bytes, KB = kilobytes, MB = megabytes, GB = gigabytes, and
  //   TB = terabytes
  //   Example: 32.GB
  max_memory = 32.GB
  // Time allocation guide:
  //   d = days, h = hours, m = minutes, s = seconds
  //   Example: '3d'
  max_time = '1d'

  // Quality control (FastQC)
  qc_adapters = null

  // Trimming (Trim Galore!)
  trim_min_length = 55
  trim_quality = 20
  trim_adapter = null
  trim_phred64 = null
  trim_forward_leading = null
  trim_forward_trailing = null
  trim_reverse_leading = null
  trim_reverse_trailing = null
  trim_leading_cutoff = null
  trim_trailing_cutoff = null

  // Assembly (SPAdes)
  kmers = [77]
}

process {
  withLabel:fast {
    cpus           = { 4 * task.attempt }
    memory         = { 8.GB * task.attempt }
    time           = { 3.h * task.attempt }
    clusterOptions = '--constraint=scratch2'
    errorStrategy  = { task.exitStatus in ERROR_CODES ? 'retry' : 'finish' }
    maxRetries     = params.max_retries
  }
  withLabel:normal {
    cpus           = { 4 * task.attempt }
    memory         = { 8.GB * task.attempt }
    time           = { 6.h * task.attempt }
    clusterOptions = '--constraint=scratch2'
    errorStrategy  = { task.exitStatus in ERROR_CODES ? 'retry' : 'finish' }
    maxRetries     = params.max_retries
  }
  withLabel:big_mem {
    cpus           = params.max_cpus
    memory         = { params.max_memory * task.attempt }
    time           = { params.max_time * task.attempt }
    clusterOptions = '--constraint=scratch2'
    queue          = 'fat+'
    errorStrategy  = { task.exitStatus in ERROR_CODES ? 'retry' : 'finish' }
    maxRetries     = params.max_retries
  }
}

profiles {
  cluster {
    executor {
      name                 = 'slurm'
      queueSize            = 50
      submitRateLimit      = '10 sec'
    }
  }
  conda {
    process.conda          = "$baseDir/environment.yml"
    params.enable_conda    = true
  }
  docker {
    docker.enabled         = true
    docker.userEmulation   = true

    process {
      withName:qualityControl {
        container = 'quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1'
      }
      withName:trimming {
        container = 'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0'
      }
      withName:assembly {
        container = 'quay.io/biocontainers/spades:3.15.3--h95f258a_0'
      }
      withName:assemblyQualityAssessment {
        container = 'quay.io/biocontainers/quast:5.0.2--py36pl5262h30a8e3e_4'
      }
      withName:rawReadsStats {
        container = 'quay.io/biocontainers/seqkit:2.0.0--h9ee0642_0'
      }
      // withName:coverageEstimation {
      //   container = 'quay.io/biocontainers/genomescope2:2.0--py39r40hdfd78af_4'
      // }
    }
  }
  singularity {
    singularity.enabled    = true
    singularity.autoMounts = true

    process {
      withName:qualityControl {
        container = 'docker://quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1'
      }
      withName:trimming {
        container = 'docker://quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0'
      }
      withName:assembly {
        container = 'docker://quay.io/biocontainers/spades:3.15.3--h95f258a_0'
      }
      withName:assemblyQualityAssessment {
        container = 'docker://quay.io/biocontainers/quast:5.0.2--py36pl5262h30a8e3e_4'
      }
      withName:rawReadsStats {
        container = 'docker://quay.io/biocontainers/seqkit:2.0.0--h9ee0642_0'
      }
      withName:trimmedReadsStats {
        container = 'docker://quay.io/biocontainers/seqkit:2.0.0--h9ee0642_0'
      }
      // withName:coverageEstimation {
      //   container = 'docker://quay.io/biocontainers/genomescope2:2.0--py39r40hdfd78af_4'
      // }
    }
  }
}

// Write tracing and visualisation files
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')

timeline {
  enabled = true
  file = "${params.output}/trace/timeline_${trace_timestamp}.html"
}
report {
  enabled = true
  file = "${params.output}/trace/report_${trace_timestamp}.html"
}
trace {
  enabled = true
  file = "${params.output}/trace/trace_${trace_timestamp}.txt"
}
dag {
  enabled = true
  file = "${params.output}/trace/dag_${trace_timestamp}.svg"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Prevents local Python/R libraries from conflicting with those in the
// container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}
