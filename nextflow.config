/*
 * ======================================================
 *  eukaryotic-genome-assembly default configuration file
 * ======================================================
 */

// A failed process is retried when encountering one of these exit codes
final ERROR_CODES = [12,143,137,104,134,139]
// Use one of these node for memory-intense tasks
final FAT_PARTITION = 'fat'
final FAT_PLUS_PARTITION = 'fat+'
// Use this node for non-memory-intense tasks
final NORMAL_PARTITION = 'medium'
// Start using the fat/fat+ partitions when the amount of memory exceeds one
// of these values
final FAT_PARTITION_THRESHOLD = 60.GB
final FAT_PLUS_PARTITION_THRESHOLD = 500.GB
// Never request more memory than this from a node
final MAX_NODE_MEMORY = 1.TB
// Job submissions can never be longer than this
final MAX_NODE_WALLTIME = 5.d
// Request `--qos=long` when job submissions are longer than this threshold
final QOS_LONG_THRESHOLD = 2.d

summary {
  name            = 'eukaryotic-genome-assembly'
  author          = 'Thilo Schulze'
  website         = 'https://github.com/ThiloSchulze/eukaryotic-genome-assembly'
  description     = 'A pipeline for eukaryotic genome assembly'
  mainScript      = 'main.nf'
  nextflowVersion = '!>=20.04.1'
  version         = '1.1'
}

params {
  // Mandatory option
  reads                 = null

  // Miscellaneous
  help                  = false
  version               = false

  // Input/output options
  single_end            = false
  output                = "assembly_out"

  // Resource allocation (default values only, expected to be overwritten)
  max_retries           = 2
  max_cpus              = 16
  // Memory allocation guide:
  //   B = bytes, KB = kilobytes, MB = megabytes, GB = gigabytes, and
  //   TB = terabytes
  //   Example: 32.GB
  max_memory            = 256.GB
  // Time allocation guide:
  //   d = days, h = hours, m = minutes, s = seconds
  //   Example: '2d'
  max_time              = '2d'

  // Quality control (FastQC)
  qc_adapters           = null

  // Trimming (Trim Galore!)
  trim_min_length       = 55
  trim_quality          = 20
  trim_adapter          = null
  trim_phred64          = null
  trim_forward_leading  = null
  trim_forward_trailing = null
  trim_reverse_leading  = null
  trim_reverse_trailing = null
  trim_leading_cutoff   = null
  trim_trailing_cutoff  = null

  // Assembly (SPAdes)
  //   Example, one K-mer: [81]
  //   Example, multiple K-mers: [71, 81, 91]
  kmers                 = [55]
  meta                  = false
}

process {
  withLabel:fast {
    cpus           = { 4 * task.attempt < params.max_cpus ?
                       4 * task.attempt : params.max_cpus }
    memory         = { 8.GB * task.attempt < params.max_memory ?
                       8.GB * task.attempt : params.max_memory }
    time           = { 3.h * task.attempt < params.max_time ?
                       3.h * task.attempt : params.max_time }
    clusterOptions = '--constraint=scratch2'
    errorStrategy  = { task.exitStatus in ERROR_CODES ? 'retry' : 'finish' }
    maxRetries     = params.max_retries
  }
  withLabel:normal {
    cpus           = { 4 * task.attempt < params.max_cpus ?
                       4 * task.attempt : params.max_cpus }
    memory         = { 8.GB * task.attempt < params.max_memory ?
                       8.GB * task.attempt : params.max_memory }
    time           = { 6.h * task.attempt < params.max_time ?
                       6.h * task.attempt : params.max_time }
    clusterOptions = '--constraint=scratch2'
    errorStrategy  = { task.exitStatus in ERROR_CODES ? 'retry' : 'finish' }
    maxRetries     = params.max_retries
  }
  withLabel:big_mem {
    cpus           = params.max_cpus
    // Do not utilize more than 1 TB of memory (most nodes have less)
    memory         = { params.max_memory * task.attempt < MAX_NODE_MEMORY ?
                       params.max_memory * task.attempt : MAX_NODE_MEMORY }
    // Runtime cannot exceed 5 days total
    time           = { params.max_time < MAX_NODE_WALLTIME ?
                       params.max_time : MAX_NODE_WALLTIME }
    // Add the `--qos=long` flag if the job spans more than 48 hours
    clusterOptions = { params.max_time > QOS_LONG_THRESHOLD ?
                       '--constraint=scratch2 --qos=long' :
                       '--constraint=scratch2' }
    queue = { params.max_memory * task.attempt > FAT_PLUS_PARTITION_THRESHOLD ?
              FAT_PLUS_PARTITION : FAT_PARTITION }
    errorStrategy  = { task.exitStatus in ERROR_CODES ? 'retry' : 'finish' }
    maxRetries     = params.max_retries
  }
}

profiles {
  cluster {
    executor {
      name               = 'slurm'
      queueSize          = 50
      submitRateLimit    = '10 sec'
    }
  }
  conda {
    process.conda        = "$baseDir/environment.yml"
    params.enable_conda  = true
  }
  docker {
    docker.enabled       = true
    docker.userEmulation = true

    process {
      withName:qualityControl {
        container = 'quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1'
      }
      withName:trimming {
        container = 'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0'
      }
      withName:assembly {
        container = 'quay.io/biocontainers/spades:3.15.3--h95f258a_0'
      }
      withName:assemblyQualityAssessment {
        container = 'quay.io/biocontainers/quast:5.0.2--py36pl5262h30a8e3e_4'
      }
      withName:rawReadStats {
        container = 'quay.io/biocontainers/seqkit:2.0.0--h9ee0642_0'
      }
      withName:trimmedReadStats {
        container = 'docker://quay.io/biocontainers/seqkit:2.0.0--h9ee0642_0'
      }
      // withName:coverageEstimation {
      //   container = 'quay.io/biocontainers/genomescope2:2.0--py39r40hdfd78af_4'
      // }
    }
  }
  singularity {
    singularity.enabled    = true
    singularity.autoMounts = true

    process {
      withName:qualityControl {
        container = 'docker://quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1'
      }
      withName:trimming {
        container = 'docker://quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0'
      }
      withName:assembly {
        container = 'docker://quay.io/biocontainers/spades:3.15.3--h95f258a_0'
      }
      withName:assemblyQualityAssessment {
        container = 'docker://quay.io/biocontainers/quast:5.0.2--py36pl5262h30a8e3e_4'
      }
      withName:rawReadStats {
        container = 'docker://quay.io/biocontainers/seqkit:2.0.0--h9ee0642_0'
      }
      withName:trimmedReadStats {
        container = 'docker://quay.io/biocontainers/seqkit:2.0.0--h9ee0642_0'
      }
      // withName:coverageEstimation {
      //   container = 'docker://quay.io/biocontainers/genomescope2:2.0--py39r40hdfd78af_4'
      // }
    }
  }
}

// Write tracing and visualisation files
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')

timeline {
  enabled = true
  file    = "${params.output}/ega_trace/timeline_${trace_timestamp}.html"
}
report {
  enabled = true
  file    = "${params.output}/ega_trace/report_${trace_timestamp}.html"
}
trace {
  enabled = true
  file    = "${params.output}/ega_trace/trace_${trace_timestamp}.txt"
}
dag {
  enabled = true
  file    = "${params.output}/ega_trace/dag_${trace_timestamp}.svg"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Prevents local Python/R libraries from conflicting with those in the
// container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}
