// Capture exit codes from upstream processes when piping
process.shell = ['/usr/bin/env bash', '-euo', 'pipefail']

// Prevent local Python libraries from conflicting with those in the container.
env { PYTHONNOUSERSITE = 1 }

summary {
  name = 'qc_trimming'
  author = 'Thilo Schulze, Felix Thalen'
  website = 'https://github.com/ThiloSchulze/eukaryotic-genome-assembly'
  description = 'Check quality pre-trimming, trimming, quality check after trimming'
  mainScript = 'main.nf'
  nextflowVersion = '!>=20.04.1'
  version = '1.0.2'
}

params {
  // Mandatory Parameter
  reads = null

  // Resource allocation
  max_memory = '62.GB' // B, KB, MB, GB, or TB
  max_cpus = 8
  max_time = '5.d' // d = days, h = hours, m = minutes, s = seconds

  // Miscellaneous
  help = false
  version = false

  // Downstream data handling
  single_end = false
  output = "assembly_out"

  // Quality control (FastQC)
  qc_adapters = null

  // Trimming (Trim Galore!)
  trim_min_length = 55
  trim_quality = 20
  trim_adapter = null
  trim_phred64 = null
  trim_forward_leading = null
  trim_forward_trailing = null
  trim_reverse_leading = null
  trim_reverse_trailing = null
  trim_leading_cutoff = null
  trim_trailing_cutoff = null

  // Assembly (SPAdes)
  kmers = [77]
}

process {
  withLabel:big_mem {
    time = params.max_time
    cpus = params.max_cpus
    memory = params.max_memory
  }
  withName:qualityControl {
    cpus = params.max_cpus
  }
  withName:trimming {
    cpus = params.max_cpus
    time = '6.h'
  }
  withName:assemblyQualityAssessment {
    cpus = params.max_cpus
    time = '6.h'
  }
}

profiles {
  cluster {
    process.scratch        = true
    scratch                = "/scratch2/$USER"
    clusterOptions         = { '--qos="long"' }

    executor {
      name = 'slurm'
      queueSize = 50
      submitRateLimit = '10 sec'
    }

    process {
      withLabel:big_mem {
        queue = 'fat+'
        errorStrategy = 'retry'
        maxRetries = 3
      }
    }
  }
  conda {
    process.conda          = "$baseDir/environment.yml"
    params.enable_conda    = true
  }
  docker {
    docker.enabled         = true
    docker.userEmulation   = true

    process {
      withName:qualityControl {
        container = 'quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1'
      }
      withName:trimming {
        container = 'quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0'
      }
      withName:assembly {
        container = 'quay.io/biocontainers/spades:3.15.3--h95f258a_0'
      }
      withName:assemblyQualityAssessment {
        container = 'quay.io/biocontainers/quast:5.0.2--py36pl5262h30a8e3e_4'
      }
      withName:rawReadsStats {
        container = 'quay.io/biocontainers/seqkit:2.0.0--h9ee0642_0'
      }
      withName:trimmedReadsStats {
        container = 'quay.io/biocontainers/seqkit:2.0.0--h9ee0642_0'
      }
    }
  }
  singularity {
    singularity.enabled    = true
    singularity.autoMounts = true

    process {
      withName:qualityControl {
        container = 'docker://quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1'
      }
      withName:trimming {
        container = 'docker://quay.io/biocontainers/trim-galore:0.6.7--hdfd78af_0'
      }
      withName:assembly {
        container = 'docker://quay.io/biocontainers/spades:3.15.3--h95f258a_0'
      }
      withName:assemblyQualityAssessment {
        container = 'docker://quay.io/biocontainers/quast:5.0.2--py36pl5262h30a8e3e_4'
      }
      withName:rawReadsStats {
        container = 'docker://quay.io/biocontainers/seqkit:2.0.0--h9ee0642_0'
      }
      withName:trimmedReadsStats {
        container = 'docker://quay.io/biocontainers/seqkit:2.0.0--h9ee0642_0'
      }
    }
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']
